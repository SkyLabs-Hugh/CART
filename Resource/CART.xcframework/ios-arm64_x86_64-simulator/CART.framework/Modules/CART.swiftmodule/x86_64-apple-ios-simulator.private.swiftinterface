// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios16.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name CART
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
@_exported import CART
import Combine
import CommonCrypto
import Compression
import CoreBluetooth
import CryptoKit
import Foundation
import SQLite3
import Security
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc public class CARTResources : ObjectiveC.NSObject {
  @objc public class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BLEBase : ObjectiveC.NSObject {
  public var isTryConnect: Swift.Bool
  open func onNotifyData(uuid: CoreBluetooth.CBUUID, response: [Swift.UInt8])
  open func changeConnectionState(state: Swift.Bool)
  open func checkBleState(state: CART.CARTDefs.ErrorType)
  @objc override dynamic public init()
  @objc deinit
}
extension CART.BLEBase {
  public func startService(complete: @escaping () -> Swift.Void)
}
extension CART.BLEBase : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, willRestoreState dict: [Swift.String : Any])
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
}
extension CART.BLEBase : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
}
extension CART.BLEBase {
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
}
extension CART.BLEBase {
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  public func bleStartService()
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
}
public enum BizType {
  case B2H
  case B2C
  public static func == (a: CART.BizType, b: CART.BizType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum BizSubType {
  case NONE
  case B2HP
  public static func == (a: CART.BizSubType, b: CART.BizSubType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CARTProtocol {
  public struct TYPE : Swift.Equatable {
    public static func == (a: CART.CARTProtocol.TYPE, b: CART.CARTProtocol.TYPE) -> Swift.Bool
  }
}
public enum DataControlStatus {
  case START
  case PROGRESS
  case STEP
  case COMPLETE
  case FAIL
  public static func == (a: CART.DataControlStatus, b: CART.DataControlStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias ResponseType = (_ payload: CART.ReadData, _ bytes: [Swift.UInt8], _ response: CART.CARTFwResponse) -> Swift.Void
public typealias CompleteType = (_ status: CART.DataControlStatus, _ percent: Swift.Double) -> Swift.Void
public typealias ReturnDataType = (status: CART.DataControlStatus, percent: Swift.Double)
public typealias PacketData = ((_ packetData: Swift.String) -> Swift.Void)?
public typealias DenormalPPGData = ((_ ppgData: [CART.CARTDataType : [Swift.Double]]) -> Swift.Void)?
public typealias NormalPPGData = ((_ ppgData: [CART.CARTDataType : [Swift.Double]]) -> Swift.Void)?
public struct ReadData {
}
public struct BackgroundBPData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public class CARTManager : ObjectiveC.NSObject, CART.CARTMangerServiceProtocol {
  public init(clientId: Swift.String, clientSecret: Swift.String, bleVersion: CART.CARTDefs.CARTProtocolVersion, cartListener: any CART.CARTListener, bizType: CART.BizType = .B2H, bizSubType: CART.BizSubType = .NONE)
  public func StartService()
  public func setUserInfo(userKey: Swift.String, info: inout [Swift.String : Any?], listener: any CART.CARTUserListener)
  @objc deinit
}
extension CART.CARTManager {
  public func scanStart(listener: any CART.CARTScanListener)
  public func scanStop()
}
extension CART.CARTManager {
  public func connectSerial(serialId: Swift.String, isReg: Swift.Bool)
  public func connect(macAddress: Swift.String, isReg: Swift.Bool)
  public func connect(cartName: Swift.String, isReg: Swift.Bool)
  public func disConnect()
}
extension CART.CARTManager {
  public func deviceInfo() -> CART.CARTDeviceInfo?
  public func deviceInfoFromServer() -> CART.CARTDeviceInfo?
}
extension CART.CARTManager {
  public func stop()
}
extension CART.CARTManager {
  public func batteryInfo(_ listener: (any CART.CARTBatteryListener)? = nil)
}
extension CART.CARTManager {
  public func systemStatus(listener: any CART.CARTStatusListener)
}
extension CART.CARTManager {
  public func calibration(listener: any CART.CARTCalListener)
}
extension CART.CARTManager {
  public func iss(issListener: any CART.CARTISSListener)
}
extension CART.CARTManager {
  public func pss(pssListener: any CART.CARTPSSListener)
}
extension CART.CARTManager {
  public func eventLog(listener: any CART.CARTLogListener)
}
extension CART.CARTManager {
  public func backgroundBP(listener: any CART.CARTBpListener, count: Swift.Int)
  public func bpStatus(listener: any CART.CARTStatusListener)
}
extension CART.CARTManager {
  public func collectStart(listener: any CART.CARTCmdListener, time: Swift.Int, count: Swift.Int)
  public func collectStop(listener: any CART.CARTCmdListener)
}
public protocol CARTMangerServiceProtocol {
  func setUserInfo(userKey: Swift.String, info: inout [Swift.String : Any?], listener: any CART.CARTUserListener)
  func scanStart(listener: any CART.CARTScanListener)
  func scanStop()
  func connectSerial(serialId: Swift.String, isReg: Swift.Bool)
  func connect(macAddress: Swift.String, isReg: Swift.Bool)
  func connect(cartName: Swift.String, isReg: Swift.Bool)
  func disConnect()
  func deviceInfo() -> CART.CARTDeviceInfo?
  func deviceInfoFromServer() -> CART.CARTDeviceInfo?
  func stop()
  func batteryInfo(_ listener: (any CART.CARTBatteryListener)?)
  func systemStatus(listener: any CART.CARTStatusListener)
  func calibration(listener: any CART.CARTCalListener)
  func iss(issListener: any CART.CARTISSListener)
  func pss(pssListener: any CART.CARTPSSListener)
  func eventLog(listener: any CART.CARTLogListener)
  func bpStatus(listener: any CART.CARTStatusListener)
  func backgroundBP(listener: any CART.CARTBpListener, count: Swift.Int)
  func collectStart(listener: any CART.CARTCmdListener, time: Swift.Int, count: Swift.Int)
  func collectStop(listener: any CART.CARTCmdListener)
}
public protocol CARTBpListener {
  func bpCount(count: Swift.Int)
  func bpProgress(position: Swift.Int, max: Swift.Int)
  func bpResult(result: CART.CARTBpResult)
}
public protocol CARTBatteryListener {
  func batteryStatus(level: Swift.Int, charge: Swift.Bool)
  func batteryError(type: CART.CARTDefs.CARTErrorType)
}
public protocol CARTCalListener {
  func calProgress(position: Swift.Int)
  func calRealTime(data: [Swift.Double], time: Swift.Int)
  func calUserConfirm(callbackCuff: @escaping (_ sbp: Swift.Int, _ dbp: Swift.Int, _ errCount: Swift.Int) -> Swift.Void)
  func calAfterSaveCuff(step: CART.CARTDefs.CalibrationStep, calEnd: CART.CARTCalEnd, callbackNext: @escaping (_ nextStep: Swift.Bool) -> Swift.Void)
  func calStabilityFail(step: CART.CARTDefs.CalibrationStep, callbackNext: @escaping (_ nextStep: Swift.Bool) -> Swift.Void)
  func calResult(result: CART.CARTCalibrationResult, step: CART.CARTDefs.CalibrationStep, callbackNext: @escaping (_ nextStep: Swift.Bool) -> Swift.Void)
}
public protocol CARTCmdListener {
  func cmdResult(result: CART.CARTCmdResult)
}
public protocol CARTISSListener {
  func issProgress(position: Swift.Double)
  func issResult(result: CART.CARTIssResult)
}
public protocol CARTListener {
  func CARTBleConnectStatus(status: CART.CARTDefs.ConnectStatus)
  func CARTBatteryStatus(level: Swift.Int, charge: Swift.Bool)
  func CARTNotification(type: CART.CARTDefs.NotiType)
  func CARTVerifyConfirm(regMode: Swift.Bool, listener: @escaping (_ confirm: Swift.Bool) -> Swift.Void)
  func CARTError(type: CART.CARTDefs.ErrorType)
  func CARTStop()
}
public protocol CARTLogListener {
  func logCount(_ count: Swift.Int)
  func logProgress(position: Swift.Int, max: Swift.Int)
  func logResult(result: CART.CARTLogResult)
}
public protocol CARTPSSListener {
  func pssProgress(position: Swift.Double)
  func pssResult(success: Swift.Bool, errorType: CART.CARTDefs.CARTErrorType?)
}
public protocol CARTScanListener {
  func bleScanList(scanStatus: CART.CARTDefs.ScanStatus, device: CART.CARTDevice?)
}
public protocol CARTStatusListener {
  func statusResult(success: Swift.Bool, status: CART.CARTStatus?, errorType: CART.CARTDefs.CARTErrorType?)
}
public protocol CARTUserListener {
  func userResult(success: Swift.Bool)
}
public struct CARTCalEnd {
  public var calHistParentNo: Swift.Int
  public var saveKey: Swift.String
  public var signalQualityDecision: Swift.Int
  public var bpStability: Swift.Int
  public var calibrationRound: Swift.Int
  public var calibrationCount: Swift.Int
  public var successCount: Swift.Int
}
public enum CARTDefs {
  public enum CARTProtocolVersion {
    case V1
    case V2
    public static func == (a: CART.CARTDefs.CARTProtocolVersion, b: CART.CARTDefs.CARTProtocolVersion) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ConnectStatus : Swift.CaseIterable, Swift.Hashable {
    case connected
    case disconnect
    case connecting
    case error
    public static func == (a: CART.CARTDefs.ConnectStatus, b: CART.CARTDefs.ConnectStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [CART.CARTDefs.ConnectStatus]
    nonisolated public static var allCases: [CART.CARTDefs.ConnectStatus] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ScanStatus : Swift.CaseIterable, Swift.Hashable {
    case startScan
    case scanning
    case stopScan
    case error
    public static func == (a: CART.CARTDefs.ScanStatus, b: CART.CARTDefs.ScanStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [CART.CARTDefs.ScanStatus]
    nonisolated public static var allCases: [CART.CARTDefs.ScanStatus] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum CARTErrorType : Swift.Int, Swift.CaseIterable {
    case NONE
    case WD_ERROR
    case ERROR
    case UNAVAILABLE
    case DATA_NONE
    case BATTERY_CHARGING
    case CMD_RES_ERR
    case API_ERROR
    case HTTP_ERROR
    case ERROR_CODE
    case WORK_IN_PROGRESS
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [CART.CARTDefs.CARTErrorType]
    public typealias RawValue = Swift.Int
    nonisolated public static var allCases: [CART.CARTDefs.CARTErrorType] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum CalErrorCode : Swift.Int {
    case NONE
    case RESERVED
    case AF_FAILED
    case NOISE_POOR
    case OUTLIER
    case BP_STABILITY_FAILED
    case SIGNAL_FAILED
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum CalibrationStep : Swift.Int {
    case NONE
    case FIRST
    case SECONDARY
    case THIRD
    case COMPLETE
    case UNKNOWN
    public static func from(_ value: Swift.Int) -> CART.CARTDefs.CalibrationStep
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum NotiType {
    case NONE
    case BATTERY
    case PSS
    case EVENT_LOG
    case TIME_OUT
    case BG_CHECK
    public static func == (a: CART.CARTDefs.NotiType, b: CART.CARTDefs.NotiType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ErrorType {
    case NONE
    case NOT_REGISTERED
    case NOT_CONNECTED
    case VERIFY_DENIED
    case VERIFY_ERROR
    case CART_UPDATE_ERROR
    case CMD_RES_ERR
    case FAIL_GET_MACADDRESS
    case API_ERROR
    case HTTP_ERROR
    case WORK_IN_PROGRESS
    case BLE_POWER_OFF
    case BLE_NSBLUETOOTH
    case ERROR
    public static func == (a: CART.CARTDefs.ErrorType, b: CART.CARTDefs.ErrorType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct CARTDevice {
  public var name: Swift.String?
  public var identifier: Swift.String?
  public var rssi: Swift.Int?
  public func sortDevice(scanList: [CART.CARTDevice]) -> [CART.CARTDevice]
}
public struct CARTEventLogModel {
}
public struct CARTInfo {
  public let name: Swift.String?
  public let identifier: Swift.String?
  public let rssi: Swift.String?
}
public struct CARTStatus {
  public var bpCount: Swift.Int {
    get
  }
  public var logCount: Swift.Int {
    get
  }
  public var batteryLevel: Swift.Int {
    get
  }
  public var charge: Swift.Bool {
    get
  }
}
public struct CARTSystemStatusModel {
  public let eventDataCount: Swift.Int
  public var afibBgDataCount: Swift.Int
  public var bpBgDataCount: Swift.Int
  public var spo2BgDataCount: Swift.Int
  public var batteryLevel: Swift.Double {
    get
  }
  public var totalBgCount: Swift.Int {
    get
  }
}
public enum CARTDataType : Swift.UInt8 {
  case PPG_RED
  case PPG_IR
  case PPG_AMBIENT
  case PPG_GREEN
  case ECG
  case ACC
  case PPG_GREEN_ECG
  case LOG
  case SELF_CHECK_VAR_REALTIME_PPG
  case NA
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum CARTFwResponse : Swift.UInt8 {
  case AT_CMD_RES_NORMAL
  case AT_CMD_RES_TYPE_ERR
  case AT_CMD_RES_DATA_LEN_ERR
  case AT_CMD_RES_DATA_RANGE_ERR
  case AT_CMD_RES_CONDITION_ERR
  case AT_DATA_NULL
  case AT_ANOTHER_COMMAND
  case DT_BYTE_NULL
  case DT_ANOTHER_HEADER
  case CONTROL_ANOTHER_FLAG
  case JNI_WEARABLE_ERR
  case APPLICATION_CUSTOM_ERR
  case AT_CMD_RES_NULL_ERR
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum APIErrorCode : Swift.Error {
  case noRegistredDevice
  case alreadyLogoutToken
  case loginHistoryNotFound
  case loginExpired
  case loginCodeNotValified
  case unknownError(Swift.String)
  case httpError(Swift.Int)
}
@_hasMissingDesignatedInitializers final public class APILogger : Swift.Sendable {
  public static let shared: CART.APILogger
  final public func logRequest(_ request: Foundation.URLRequest)
  final public func logResponse(_ response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?)
  @objc deinit
}
public struct CARTBpResult {
  public var success: Swift.Bool
  public var errorType: CART.CARTDefs.CARTErrorType?
}
public struct CARTCalibrationResult {
  public var success: Swift.Bool
  public var code: CART.CARTDefs.CalErrorCode?
  public var errorType: CART.CARTDefs.CARTErrorType?
}
public struct CARTCmdResult {
  public var success: Swift.Bool
  public var errorType: CART.CARTDefs.CARTErrorType?
}
public struct CARTDeviceInfo : Swift.Codable {
  public var seq: Swift.Int
  public var name: Swift.String
  public var address: Swift.String
  public var serial: Swift.String
  public var currentFw: Swift.String
  public var size: Swift.Int
  public var defective: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CARTLogResult {
  public var success: Swift.Bool
  public var errorType: CART.CARTDefs.CARTErrorType?
}
public enum ISSErrorType : Swift.Int {
  case NONE
  case WD_ERROR
  case ERROR
  case BATTERY_CHARGING
  case BATTERY_TIMEOUT
  case CMD_RES_ERR
  case API_ERROR
  case HTTP_ERROR
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct CARTIssResult {
  public var success: Swift.Bool
  public var errorType: CART.CARTDefs.CARTErrorType?
}
@propertyWrapper public struct UserDefault<Value> {
  public var wrappedValue: Value? {
    get
    set
  }
}
@_hasMissingDesignatedInitializers public class CARTUserDefault {
  public static let standard: CART.CARTUserDefault
  @CART.UserDefault public var pssCheckTime: Swift.Int32? {
    get
    set
    _modify
  }
  @objc deinit
}
extension CART.BizType : Swift.Equatable {}
extension CART.BizType : Swift.Hashable {}
extension CART.BizSubType : Swift.Equatable {}
extension CART.BizSubType : Swift.Hashable {}
extension CART.DataControlStatus : Swift.Equatable {}
extension CART.DataControlStatus : Swift.Hashable {}
extension CART.CARTDefs.CARTProtocolVersion : Swift.Equatable {}
extension CART.CARTDefs.CARTProtocolVersion : Swift.Hashable {}
extension CART.CARTDefs.CARTErrorType : Swift.Equatable {}
extension CART.CARTDefs.CARTErrorType : Swift.Hashable {}
extension CART.CARTDefs.CARTErrorType : Swift.RawRepresentable {}
extension CART.CARTDefs.CalErrorCode : Swift.Equatable {}
extension CART.CARTDefs.CalErrorCode : Swift.Hashable {}
extension CART.CARTDefs.CalErrorCode : Swift.RawRepresentable {}
extension CART.CARTDefs.CalibrationStep : Swift.Equatable {}
extension CART.CARTDefs.CalibrationStep : Swift.Hashable {}
extension CART.CARTDefs.CalibrationStep : Swift.RawRepresentable {}
extension CART.CARTDefs.NotiType : Swift.Equatable {}
extension CART.CARTDefs.NotiType : Swift.Hashable {}
extension CART.CARTDefs.ErrorType : Swift.Equatable {}
extension CART.CARTDefs.ErrorType : Swift.Hashable {}
extension CART.CARTDataType : Swift.Equatable {}
extension CART.CARTDataType : Swift.Hashable {}
extension CART.CARTDataType : Swift.RawRepresentable {}
extension CART.CARTFwResponse : Swift.Equatable {}
extension CART.CARTFwResponse : Swift.Hashable {}
extension CART.CARTFwResponse : Swift.RawRepresentable {}
extension CART.ISSErrorType : Swift.Equatable {}
extension CART.ISSErrorType : Swift.Hashable {}
extension CART.ISSErrorType : Swift.RawRepresentable {}
